{"version":3,"sources":["App.js","serviceWorker.js","index.js","archan.png"],"names":["App","vantaRef","React","this","vantaEffect","BIRDS","el","current","mouseControls","touchControls","color","backgroundColor","points","maxDistance","spacing","destroy","className","ref","id","src","logo","avgTypingDelay","cursor","hideWhenDone","startDelay","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6VA2JeA,E,kDAnJb,aAAe,IAAD,8BACZ,gBACKC,SAAWC,cAFJ,E,gEAKZC,KAAKC,YAAcC,IAAM,CACvBC,GAAIH,KAAKF,SAASM,QAClBC,eAAe,EACfC,eAAe,EACfC,MAAO,SACPC,gBAAiB,QACjBC,OAAQ,EACRC,YAAa,GACbC,QAAS,O,6CAIPX,KAAKC,aAAaD,KAAKC,YAAYW,Y,+BAIvC,OACE,uBAAKC,UAAU,MAAMC,IAAKd,KAAKF,UAC7B,uBAAKe,UAAU,QACb,0CACA,uBAAKE,GAAG,YACN,uBAAKC,IAAKC,IAAMJ,UAAU,aAG9B,uBAAKA,UAAU,OAEf,uBAAKA,UAAU,sBACb,uBAAKA,UAAU,2BACb,uBAAKA,UAAU,mBAAf,WAEE,uBAAKA,UAAU,oBACb,uBAAKA,UAAU,wCACf,uBAAKA,UAAU,wCACf,uBAAKA,UAAU,4CAGnB,2BACE,yCACA,gBAAC,IAAD,CACEA,UAAU,UACVK,eAAgB,GAChBC,OAAQ,CAAEC,cAAc,GACxBC,WAAY,MAEZ,8CAGJ,2BACE,uBAAKR,UAAU,eACb,iPAGA,ilBAGA,oHAGA,yCAVF,IAUoB,wBAAMA,UAAU,wBAAhB,QAKxB,uBAAKA,UAAU,6BACb,uBAAKA,UAAU,mBAAf,eAEE,uBAAKA,UAAU,oBACb,uBAAKA,UAAU,wCACf,uBAAKA,UAAU,wCACf,uBAAKA,UAAU,4CAGnB,2BACE,yCACA,uBAAKA,UAAU,sBACb,gBAAC,IAAD,CACEA,UAAU,UACVK,eAAgB,GAChBC,OAAQ,CAAEC,cAAc,GACxBC,WAAY,KAEZ,iDAKN,uBAAKR,UAAU,iBACb,yBACE,qCACA,qBACES,KAAK,qFACLC,OAAO,UAFT,UAUF,yBACE,uCACA,qBACED,KAAK,2CACLC,OAAO,UAFT,SAMA,0CACA,qBAAGD,KAAK,6BAA6BC,OAAO,UAA5C,SAIc,yBACd,oCACA,qBAAGD,KAAK,mCAAR,8BAMA,yBACA,8BAAQ,gDACR,qBAAGA,KAAK,iEAAiEC,OAAO,UAAhF,OAGA,+BACA,qBAAGD,KAAK,gEAAgEC,OAAO,UAA/E,aAMJ,uBAAKV,UAAU,iBACb,yCADF,IACoB,wBAAMA,UAAU,2BAAhB,a,GA3Idd,aCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.c333c521.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./App.css\";\nimport \"./terminal.css\";\nimport logo from \"./archan.png\";\nimport Typist from \"react-typist\";\nimport BIRDS from 'vanta/dist/vanta.net.min'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.vantaRef = React.createRef();\n  }\n  componentDidMount() {\n    this.vantaEffect = BIRDS({\n      el: this.vantaRef.current,\n      mouseControls: false,\n      touchControls: false,\n      color: 0xffffff,\n      backgroundColor: 0x135039,\n      points: 6.00,\n      maxDistance: 25.00,\n      spacing: 19.00\n    });\n  }\n  componentWillUnmount() {\n    if (this.vantaEffect) this.vantaEffect.destroy();\n  }\n\n  render() {\n    return (\n      <div className=\"app\" ref={this.vantaRef}>\n        <div className=\"name\">\n          <b>Archan Rupela</b>\n          <div id=\"content>\">\n            <img src={logo} className=\"ribbon\" />\n          </div>\n        </div>\n        <div className=\"hr\"></div>\n\n        <div className=\"terminal-container\">\n          <div className=\"terminal terminal-about\">\n            <div className=\"terminal-header\">\n              About Me\n              <div className=\"terminal-buttons\">\n                <div className=\"terminal-button terminal-button-min\"></div>\n                <div className=\"terminal-button terminal-button-max\"></div>\n                <div className=\"terminal-button terminal-button-close\"></div>\n              </div>\n            </div>\n            <div>\n              <span>➜ ~ </span>\n              <Typist\n                className=\"TypistA\"\n                avgTypingDelay={30}\n                cursor={{ hideWhenDone: true }}\n                startDelay={1500}\n              >\n                <span>cat read.txt</span>\n              </Typist>\n            </div>\n            <div>\n              <div className=\"showAboutMe\">\n                <p>\n                    Hello! My name is Archan Rupela and welcome to my page on the internet. I'm a software engineer, game developer, and leader with two years of industry experience. Check out my published games from the link below!\n                </p>\n                <p>\n                    Chances are, you're here to learn more about my professional experience. Currently, I am a Software Engineer at American Express using continuous integration and delivery (CI/CD) design practices to improve and automate the ability to quickly release bug fixes and new features. Throughout my time there, I've gained substantial experience in GitHub Actions, CI/CD pipeline automation, identifying and fixing bugs, and writing code in different languages (Java, Python, Bash). I’m confident that all these skills are exceptionally useful to me as an engineer.\n                </p>\n                <p>\n\t\t            I am always on the lookout for new, challenging opportunities. Feel free to contact me!\n                </p>\n                <span>➜ ~ </span> <span className=\"blinking_cursor_main\">|</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"terminal terminal-contact\">\n            <div className=\"terminal-header\">\n              Contact Info\n              <div className=\"terminal-buttons\">\n                <div className=\"terminal-button terminal-button-min\"></div>\n                <div className=\"terminal-button terminal-button-max\"></div>\n                <div className=\"terminal-button terminal-button-close\"></div>\n              </div>\n            </div>\n            <div>\n              <span>➜ ~ </span>\n              <div className=\"showContactMeStart\">\n                <Typist\n                  className=\"TypistA\"\n                  avgTypingDelay={30}\n                  cursor={{ hideWhenDone: true }}\n                  startDelay={5000}\n                >\n                  <span>cat contact.md</span>\n                </Typist>\n              </div>\n            </div>\n\n            <div className=\"showContactMe\">\n              <p>\n                <b>Resume: </b>\n                <a\n                  href=\"https://drive.google.com/file/d/1kBDY7M3pyUyqX18ktX5q0GY3OE3F_AlD/view?usp=sharing\"\n                  target=\"_blank\"\n                >\n                  Visit\n                </a>\n              </p>\n\n\n\n              <p>\n                <b>LinkedIn: </b>\n                <a\n                  href=\"https://www.linkedin.com/in/archanrupela\"\n                  target=\"_blank\"\n                >\n                  Visit\n                </a>\n                <b>  |  GitHub: </b>\n                <a href=\"https://github.com/archanr\" target=\"_blank\">\n                  Visit\n                </a>\n                \n                              <p>\n                <b>Email: </b>\n                <a href=\"mailto:archanrupela@outlook.com\" >\n                  archanrupela@outlook.com\n                </a>\n              </p>\n              \n              </p>              \n                <p>\n                <strong><em>Published Games: </em></strong>\n                <a href=\"https://apps.apple.com/us/developer/archan-rupela/id1626881374\" target=\"_blank\">\n                  iOS\n                </a>\n                <b>, </b>\n                <a href=\"https://play.google.com/store/apps/developer?id=Archan+Rupela\" target=\"_blank\">\n                  Android\n                </a>\n              </p>\n              \n            </div>\n            <div className=\"showContactMe\">\n              <span>➜ ~ </span> <span className=\"blinking_cursor_contact\">|</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/archan.70788697.png\";"],"sourceRoot":""}